(mod
    (M public_key_list selectors puzzle solution)

    (defmacro assert items
        (if (r items)
            (list if (f items) (c assert (r items)) (q (x)))
            (f items)
        )
    )

    (defun add_aggsig (public_keys hash delegated_puzzle solution)
        (if public_keys
            (c (list 50 (f public_keys) hash)
               (add_aggsig (r public_keys) hash delegated_puzzle solution)
            )
            (e delegated_puzzle solution)
        )
    )

    (defun choose_keys (selectors public_keys)
        (if selectors
            (if (f selectors)
                (c (f public_keys) (choose_keys (r selectors) (r public_keys)))
                (choose_keys (r selectors) (r public_keys)))
            ()
        )
    )

    (defun count_selectors (selectors)
        (if selectors
            (+
                (count_selectors (r selectors))
                (if (f selectors) 1 0)
            )
            0
        )
    )

    (defun solve_puzzle (M public_key_list selectors puzzle solution)
        (assert (= M (count_selectors selectors))
                (add_aggsig (choose_keys selectors public_key_list)
                            (sha256 (wrap puzzle))
                            puzzle
                            solution)
        )
    )

    (solve_puzzle
        M public_key_list
        selectors puzzle solution
    )
)
